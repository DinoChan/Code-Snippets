<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Keywords>
                <Keyword>ap</Keyword>
            </Keywords>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
            <Title>Attached Property</Title>
            <Author>dino.c</Author>
            <Description>For Attached Property</Description>
            <HelpUrl>
            </HelpUrl>
            <Shortcut>ap</Shortcut>
        </Header>
        <Snippet>
            <References>
                <Reference>
                    <Assembly>
                    </Assembly>
                </Reference>
            </References>
            <Declarations>
                <Literal Editable="true">
                    <ID>PropertyType</ID>
                    <ToolTip>属性类型</ToolTip>
                    <Default>int</Default>
                    <Function>
                    </Function>
                </Literal>
                <Literal Editable="true">
                    <ID>MyProperty</ID>
                    <ToolTip>属性名</ToolTip>
                    <Default>MyProperty</Default>
                    <Function>
                    </Function>
                </Literal>
                <Literal Editable="false">
                    <ID>classname</ID>
                    <ToolTip>类名</ToolTip>
                    <Function>ClassName()</Function>
                    <Default>ClassNamePlaceholder</Default>
                </Literal>
            </Declarations>
            <Code Language="csharp">
                <![CDATA[
        /// <summary>
        /// 从指定元素获取 $MyProperty$ 依赖项属性的值。
        /// </summary>
        /// <param name="obj">从中读取属性值的元素。</param>
        /// <returns>从属性存储获取的属性值。</returns>
        public static $PropertyType$ Get$MyProperty$(DependencyObject obj) => ($PropertyType$)obj.GetValue($MyProperty$Property);

        /// <summary>
        /// 将 $MyProperty$ 依赖项属性的值设置为指定元素。
        /// </summary>
        /// <param name="obj">对其设置属性值的元素。</param>
        /// <param name="value">要设置的值。</param>
        public static void Set$MyProperty$(DependencyObject obj, $PropertyType$ value) => obj.SetValue($MyProperty$Property, value);

        /// <summary>
        /// 标识 $MyProperty$ 依赖项属性。
        /// </summary>
        public static readonly DependencyProperty $MyProperty$Property =
            DependencyProperty.RegisterAttached("$MyProperty$", typeof($PropertyType$), typeof($classname$), new PropertyMetadata(default($PropertyType$), On$MyProperty$Changed));


        private static void On$MyProperty$Changed(DependencyObject obj, DependencyPropertyChangedEventArgs args)
        {
            var oldValue = ($PropertyType$)args.OldValue;
            var newValue = ($PropertyType$)args.NewValue;
            if (oldValue == newValue)
              return;
              
            var target = obj as $classname$;
        }

        ]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>